# settings file for BOUT++
# High-Beta reduced MHD case

##################################################
# Global settings used by the core code

NOUT = 100          # number of time-steps
TIMESTEP = 1.e0       # time between outputs
archive = 20        # Archive restart files after this number of outputs
wall_limit = 0.45  # wall time limit (in hours)

ShiftXderivs = true # use shifted radial derivatives?
TwistShift = true   # use twist-shift condition?
ShiftOrder = 0      # interpolation order (1 = nearest neighbour, 0=FFT)
TwistOrder = 0      # order of twist-shift interpolation
non_uniform = true

MZ = 17             # number of points in z direction (2^n + 1)
ZPERIOD = 25        # Fraction of a torus to simulate

MXG = 2
MYG = 2

NXPE = 16           # Number of processor in X

#grid = "data/cbm18_dens8_nx516ny64_n1e19.grid.nc"  # Grid file
grid = "data/cbm18_8_y064_x516_090309.nc"
#grid = "data/EAST_38300_3901_x516y64_te3.nc"
#grid = "data/EAST_33068_2900_x516y64_expni2.nc"
#grid = "data/cbm18_dens6.x516_y64.nc"

dump_format = "nc"      # Dump file format. "nc" = NetCDF, "pdb" = PDB
restart_format = "nc"   # Restart file format

StaggerGrids = false    # Use staggered grids (EXPERIMENTAL)

##################################################
# Communications
# Fastest setting depends on machine and MPI
# implementation. Do not affect result.

[comms]

async = false           # Use asyncronous sends?
pre_post = false        # Post receives as early as possible
group_nonblock = false  # Use non-blocking group operations?

##################################################
# Laplacian inversion routines

[laplace]

type=mumps
flags=0
# max_mode = 16  # Maximum N to solve for

##################################################
# FFTs

[fft]

fft_measure = true  # If using FFTW, perform tests to determine fastest method

##################################################
# derivative methods

[ddx]

first = C4  # order of first x derivatives (options are 2 or 4)
second = C4 # order of second x derivatives (2 or 4)
upwind = W3 # order of upwinding method (1, 4, 0 = TVD (DO NOT USE), 3 = WENO)

[ddy]

first = C4
second = C4
upwind = W3

[ddz]

first = C4  # Z derivatives can be done using FFT
second = C4
upwind = W3

##################################################
# Solver settings

[solver]

# mudq, mldq, mukeep, mlkeep preconditioner options
ATOL = 1.0e-8 # absolute tolerance
RTOL = 1.0e-5  # relative tolerance

use_precon = false    # Use preconditioner: User-supplied or BBD
use_jacobian = false  # Use user-supplied Jacobian

#pvode_
mxstep = 10000   # Number of internal steps between outputs
adams_moulton = false # Use Adams-Moulton method (default is BDF)
func_iter = false     # Functional iteration (default is Newton)

##################################################
# settings for high-beta reduced MHD

[highbeta]

#hyperbolic tanh profile, N0 = N0tanh(n0_height*Nbar, n0_ave*Nbar, n0_width, n0_center) 
n0_fake_prof = true    #use the hyperbolic profile of n0. If both  n0_fake_prof and T0_fake_prof are false, use the profiles from grid file 
n0_height = 0.0485        #the total height of profile of N0, in percentage of Ni_x
n0_ave = 0.0267          #the constant tail of N0 profile, in percentage of Ni_x
n0_width = 0.1         #the width of the gradient of N0, in percentage of x
n0_center = 0.633      #the the center of N0, in percentage of x
n0_bottom_x = 0.81     #the start of flat region of N0 on SOL side, in percentage of x 
T0_fake_prof = false    #use the costant profile of T0. It is prior to n0_fake_prof
Tconst = -1.0             #the amplitude of Ti0 and Te0, in percentage of Tibar

laplace_alpha = 1.0    #test the effect of first order term of invert 
                       #Laplace function
Low_limit = 1.0e-10    #Limit the negative value of total density and temperatures

density = 1.0e20       # number density of deuterium [m^-3]
                       # used to produce output normalisations
Zi = 1                 # ion charge number
nonlinear  = false     # include non-linear terms?

diamag = true          # Include diamagnetic effects?
diamag_grad_t = false  # Include Grad_par(Te) term in Psi equation
diamag_phi0 = true     # Balance ExB against Vd for stationary equilibrium

compress0 = true       # open the ion velocity equation
continuity = true      # use continuity eqution
eHall = true           # electron Hall effects
energy_flux = true     # energy flux 
energy_exch = true     # energy exchange
thermal_force = true   # thermal force
gyroviscous = true     # gyroviscous in vorticity

emass = false          # electron inertial
emass_inv = 1.         # inversion of electron mass
BScurrent = false      # bootstrap current
Aratio = 0.32          # inverse aspect ratio
 
## Resistivity and Hyper-resistivity
spitzer_resist = true  # open the clculation of Spitzer resistivity
vac_lund = +1.0e8      # Lundquist number in vacuum  (negative -> infinity)
core_lund = +1.0e8     # Lundquist number in core (negative -> infinity)
hyperresist = -1.e-12  # Hyper-resistivity coefficient (like 1 / Lundquist number)

## Radial density diffusion
radial_diffusion = true      # the switch to turn on the radial diffusion term
diffusion_coef_Hmode0 = 1.0  # the initial diffusion coefficients with unit m^2/s
diffusion_coef_Hmod10 = 10.0  # the upper limit of diffusion coefficients with unit m^2/s

## Parallel pressure diffusion
diffusion_par = 1.00         # parallel thermal conductivity (>0 open)
diffusion_perp = -1.00       # perpendicular thermal conductivity (>0 open)
q95_input = -5.0              # input q95 as a constant, if <0 use local q profile from grid
local_q = false              # using magnetic field to calculate q profile, not recommanded
q_alpha = 1.                 # flux-limiting coefficient, typical value is [0.03, 3]
 
diffusion_n4 = -1.0e-4       # 4th order Parallel density diffusion (< 0 = none)
diffusion_ti4 = -1.0e-4      # 4th order Parallel ion temperature diffusion (< 0 = none)
diffusion_te4 = -1.0e-3      # 4th order Parallel electron temperature diffusion (< 0 = none)
diffusion_v4 = -1.0e-4       # 4th order Parallel ion velocity diffusion (< 0 = none)
diffusion_u4 = -1.0e-5       # hyper parallel viscousity (<0 - none) 

## Sheath Boundary Condition ##########################################
gamma_i_BC = -2.5       #sheath energy transmission factor for ion
gamma_e_BC = -7.0       #sheath energy transmission factor for electron
Sheath_width = 0
#######################################################################

evolve_jpar = false    # If true, evolve J raher than Psi
                       # EXPERIMENTAL
evolve_pressure = true # If false, switch off all pressure evolution
phi_constraint = false # Solve phi as a constraint (DAE system, needs IDA)
jpar_bndry_width = -5 

## Effects to include/exclude
include_jpar0 = true     # determines whether to include jpar0 terms
include_curvature = true # include curvature drive term?

AA    = 2.0          # ion mass in units of proton mass 
parallel_lr_diff = false #parallel differencing method

#######################################################################
# BRACKET_METHOD flags:
# 0:BRACKET_STD; derivative methods will be determined 
#   by the choices C or W in this input file
# 1:BRACKET_SIMPLE; 2:BRACKET_ARAKAWA; 3:BRACKET_CTU.

bracket_method_exb = 0   #differencing schemes for ExB
bracket_method_mag = 2   #differencing schemes for magnetic flutter
#######################################################################
filter_nl = 1        # Switch of nonlinear fliter

noshear = false        # zero all shear

relax_j_vac = false    # Relax to zero-current in the vacuum
relax_j_tconst = 1e-2  # Time constant for vacuum relaxation

## Toroidal filtering
filter_z = true   # remove all except one mode
filter_z_mode = 1  # Specify which harmonic to keep (1 = fundamental)
low_pass_z = 16    # Keep up to and including this harmonic (-1 = keep all)
zonal_flow = 0    # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_field= 0     # remove this zonal harmonic  (-1 = keep zonal harmonic)
zonal_bkgd = -1    # remove this zonal harmonic  (-1 = keep zonal harmonic)

## Jpar smoothing
smooth_j_x = true   # Filter Jpar in the X direction
lowpass_j_z = 16   # Remove high-k modes. Specifies maximum harmonic to keep
 
## mask in x boundaries
mask_j_x = true

## Vacuum region control

vacuum_pressure = 0.02 # the pressure below which it is considered vacuum
                       # fraction of peak pressure
vacuum_trans = 0.01   # transition width (fraction of P)

## Inner boundary damping

damp_width = -1       # Width of damping region (grid cells)
damp_t_const = 1e-2  # Damping time constant

## heat source in pressure in watts
 
heating_P = -1   #   heat power in watts (< 0 = none)
hp_width  = 0.1     #   heat width, in percentage of nx (< 0 = none)
hp_length = 0.3    #   heat length in percentage of nx (< 0 = none)
 
## sink rate in pressure
 
sink_P = -1   #   sink rate in pressure (< 0 = none)
sp_width  = 0.04     #   sink width, in percentage of nx (< 0 = none)
sp_length = 0.15    #   sink length in percentage of nx (< 0 = none)
 
 
## left edge sink rate in vorticity
sink_Ul = -1.0e1        #   left edge sink rate in vorticity (< 0 = none)
su_widthl  = 0.06     #   left edge sink width, in percentage of nx (< 0 = none)
su_lengthl = 0.1     #   left edge sink length in percentage of nx (< 0 = none)
 
## right edge sink rate in vorticity
sink_Ur = -1.0e1        #   right edge sink rate in vorticity (< 0 = none)
su_widthr  = 0.06     #   right edge sink width, in percentage of nx (< 0 = none)
su_lengthr = 0.1     #   right edge sink length in percentage of nx (< 0 = none)

## Viscosity and Hyper-viscosity

viscos_par = -0.1   # Parallel viscosity (< 0 = none)
viscos_perp = -1.0  # Perpendicular
hyperviscos = -1.0  # Radial hyper viscosity

## Compressional terms (only when compress = true)
phi_curv = true    # Include curvature*Grad(phi) in P equation
# gamma = 1.6666

## field inversion flags: Add the following
#  1 - Zero-gradient DC component on inner boundary
#  2 - Zero-gradient AC component on inner boundary
#  4 -      "        DC     "      " outer    "
#  8 -      "        AC     "      " outer    "
# 16 - Zero all DC components of the result
# 32 - Don't use previous solution to start iterations
#      (iterative methods only) 
# 64 - Set the width of the boundary layer to 1
# 128 - use 4th order differencing
# 256 - Laplacian = 0 inner boundary (combine 2nd & 4th-order)
# 512 - Laplacian = 0 outer boundary ( sometimes works )

#phi_flags = 74  # inversion flags for phi (2+8+64+128)
phi_flags = 769  # 256 + 512

#apar_flags = 74 # 2+8
apar_flags = 769

##################################################
# settings for individual variables
# The section "All" defines default settings for all variables
# These can be overridden for individual variables in
# a section of that name.

[All]
scale = 0.0 # default size of initial perturbations

# form of initial profile:
# 0 - constant
# 1 - Gaussian
# 2 - Sinusoidal
# 3 - Mix of mode numbers (like original BOUT)

xs_opt = 1
ys_opt = 1
zs_opt = 2

xs_s0 = 0.5
xs_wd = 0.1

ys_s0 = 0.5
ys_wd = 0.3

zs_mode = 1

# boundary conditions
# -------------------
# dirichlet    - Zero value
# neumann      - Zero gradient
# zerolaplace  - Laplacian = 0, decaying solution
# constlaplace - Laplacian = const, decaying solution
#
# relax( )   - Make boundary condition relaxing

bndry_all = dirichlet # Default to zero-value

[U]   # vorticity

scale = 1.0e-5
#bndry_core = neumann

[Ni]  # number density
#scale = 1.0e-5
bndry_core = neumann

[Ti]  # ion temperature
#scale = 1.0e-5
bndry_core = neumann
#bndry_sol = neumann

[Te]  # electron density
#scale = 1.0e-5
bndry_core = neumann
#bndry_sol = neumann

[P]  # pressure
#scale = 1.0e-5
bndry_core = neumann

[Psi]  # Vector potential

# zero laplacian
#bndry_xin = zerolaplace
#bndry_xout = zerolaplace

[J]    # parallel current

# Zero gradient in the core
#bndry_core = neumann

[Vipar]

bndry_core = neumann

[phi]

bndry_core = neumann
#bndry_sol = neumann

[kappa] # boundary for collision rate and conductivities

bndry_core = neumann
bndry_sol = neumann

[Ajpar]


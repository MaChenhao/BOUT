# DALF3 model settings

##################################################
# Global settings used by the core code

NOUT = 50          # number of time-steps
TIMESTEP = 1000     # time between outputs
archive = 20        # Archive restart files after this number of outputs
wall_limit = 0.48      # wall time limit (in hours)

ShiftXderivs = true # use shifted radial derivatives?
TwistShift = true   # use twist-shift condition?
ShiftOrder = 0      # interpolation order (1 = nearest neighbour, 0=FFT)
TwistOrder = 0      # order of twist-shift interpolation

ShiftInitial = true
ballooning = false

MZ = 17             # number of points in z direction (2^n + 1)
ZPERIOD = 1        # Fraction of a torus to simulate

MXG = 2
MYG = 2

NXPE = 8            # Number of processor in X

grid = "slab_68x32.nc"  # Grid file

dump_format = "nc"      # Dump file format. "nc" = NetCDF, "pdb" = PDB
restart_format = "nc"   # Restart file format
 

StaggerGrids = false    # Use staggered grids (EXPERIMENTAL)

##################################################
# Communications
# Fastest setting depends on machine and MPI
# implementation. Do not affect result.

[comms]

async = false           # Use asyncronous sends?
pre_post = false        # Post receives as early as possible
group_nonblock = false  # Use non-blocking group operations?

##################################################
# Laplacian inversion routines

[laplace]

# max_mode = 16  # Maximum N to solve for
all_terms = false
laplace_nonuniform = false
filter = 0.2   # Remove the top 20% of modes (BOUT-06 zwindow=0.4)

##################################################
# FFTs

[fft]

fft_measure = true  # If using FFTW, perform tests to determine fastest method

##################################################
# derivative methods

[ddx]

first = C4  # order of first x derivatives (options are 2 or 4)
second = C4 # order of second x derivatives (2 or 4)
upwind = W3 # order of upwinding method (1, 4, 0 = TVD (DO NOT USE), 3 = WENO)

[ddy]

first = C4
second = C4
upwind = W3

[ddz]

first = C4  # Z derivatives can be done using FFT
second = C4
upwind = W3

##################################################
# Solver settings

[solver]

# mudq, mldq, mukeep, mlkeep preconditioner options
ATOL = 1.0e-8 # absolute tolerance
RTOL = 1.0e-5  # relative tolerance

use_precon = false    # Use preconditioner: User-supplied or BBD
use_jacobian = false  # Use user-supplied Jacobian

mxstep = 5000   # Number of internal steps between outputs
adams_moulton = false # Use Adams-Moulton method (default is BDF)
func_iter = false     # Functional iteration (default is Newton)

##################################################

[2field]



eta = 1.e-3       # Resistivity
mu_perp = -1.e-7        # Viscosity
mu_par  = -1.e0	        # Viscosity
mu_hyper_par = -1e0
omegaz = 0.       # Rotation frequency in BOUT z direction 

test_advection = true  # Test ExB advection (acting on Apar)
nonlinear = false       # Include nonlinear terms?
parallel_lc = true     # Use quasi-staggered LtoC and CtoL in Y

## Toroidal filtering
filter_z = false   # remove all except one mode
filter_z_mode = 1  # Specify which harmonic to keep (1 = fundamental)


bracket_method = 2 # Method to use for [f,g] terms
                   # 0 = Use default differencing methods
                   # 1 = Simplified operator
                   # 2 = Arakawa scheme
                   # 3 = Corner Transport Upwind (CTU)


include_jpar0 = false
jpar_bndry = 0     # 3 is recommended default
		   # jpar_bndry=0 and jpar_ext_bndry=3 seemed to work best 4/9/12



# field inversion flags: Add the following
#  0 - Dirichlet 
#  1 - Zero-gradient DC component on inner boundary
#  2 - Zero-gradient AC component on inner boundary
#  4 -      "        DC     "      " outer    "
#  8 -      "        AC     "      " outer    "
# 16 - Zero all DC components of the result
# 32 - Don't use previous solution to start iterations
#      (iterative methods only)
# 64 - Set the width of the boundary layer to 1
# 128 - use 4th order differencing
# 256 - Laplacian = 0 inner boundary
# 512 - Laplacian = 0 outer boundary

phi_flags = 768 #0 # 1 # 11 #769

[All]
scale = 0.0 # default size of initial perturbations

######## Boundary conditions #########
# dirichlet    - Zero value
# neumann      - Zero gradient
# zerolaplace  - Laplacian = 0, decaying solution
# constlaplace - Laplacian = const, decaying solution
#
# relax( )   - Make boundary condition relaxing

bndry_all = neumann

########### Initial conditions #######
# 0 - constant
# 1 - Gaussian
# 2 - Sinusoidal
# 3 - Mix of mode numbers (like original BOUT)

########### Evolving variables #######

[Upar]   # vorticity

[Apar]

#function = (1-4*x*(1-x))*sin(3*y - z)
xs_opt = 1
ys_opt = 0
zs_opt = 2

xs_s0 = 0.5
xs_wd = 0.1

ys_s0 = 0.5
ys_wd = 0.1

zs_mode = 1

scale = 0.0e-4

bndry_xin  = zerolaplace   # Radial BCs specified in inversion
bndry_xout = zerolaplace

########### Auxilliary variables

[Phi]

#function = x * 10. * 6.46246*/1.0
scale = 0.e-4

bndry_xin = zerolaplace   # Radial BCs specified in laplace inversion
bndry_xout = zerolaplace  # originally set to none

[Jpar]

########## External fields

[Phi0_ext]

function = x 
scale = 0.e2
include_phi0_ext = false

[Apar_ext]

function = (1.-(4.-0.)*x*(1.-x))*sin(3*y - z)
scale = 1.e-4
include_apar_ext = true
jpar_ext_bndry=3        #presently, jpar_ext =0 on bndry, seems best to smooth? 4/9/12


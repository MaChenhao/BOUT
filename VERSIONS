         BOUT++ versions, and major changes
         ==================================

MD5 Checksums
-------------

BOUT++ takes an MD5 hash of its source code at compile time,
and writes this into the output logs. This is to help check
that different runs are using the same version of the code.
Run SRC/checksum.sh to get the checksum.

         --- Hash ---                    --- Version ---

98c532a65f0d499f7606a9ddf53ce1e8        1.0-RELEASE
13598849ac0565e2c39296a230a3dce3        FACETS-INITIAL
c14cba9486e36a51a0d246411b5082ec	0.80-RELEASE
9703e3588ef9e66cc89a893e4706d8ac        0.70-RELEASE

1.0-RELEASE
-----------

Release of BOUT++ for August 2011 workshop at LLNL

FACETS-INITIAL
--------------

Initial check-in to the Tech-X FACETS repository, June 2010

Based on NERSC SVN r540, BOUT++ version 0.80

0.80-RELEASE
------------

Update of 0.70, and first version under the LGPL license.
Still not "complete", as there are a few things like boundary
conditions and topology which need working on.

Main changes from 0.70:

 o Interface to time-integration solvers changed to allow
   coupling to the PETSc library

 o Grid file reading reorganised into object-oriented structure.
   Intended to allow reading grid variables through different means
   (e.g. direct coupling to another code/framework).

 o Improvements to solvers such as the Laplacian inversion code (more terms
   added for LAPD simulations). 

 o Miscellaneous improvements, though no big bugs in the main code.

 o A gridding code almost working (under tokamak_grids/gridgen). Still
   missing output stage.

Released May 2010, from NERSC SVN revision 479

0.70-RELEASE
------------

First "official" release of BOUT++. Pretty much feature-complete, 
but still beta testing (hence not v1.0). 

Dependencies:

 o SUNDIALS (https://computation.llnl.gov/casc/sundials/main.html)
   Either the CVODE or IDA solvers can be used. If IDA is used,
   then algebraic constraints can be used. User can supply their
   own preconditioner and/or Jacobian-vector multiply routnes.

 o FFTW (www.fftw.org) for Fourier Transform routines

 o LAPACK (http://www.netlib.org/lapack/)
   used for linear algebra routines like tri- and band-diagonal solvers

 o NetCDF-4 (http://www.unidata.ucar.edu/software/netcdf/)
   *or* PACT (http://pact.llnl.gov/)
   Libraries for file I/O. NetCDF-4 allows writing to either "classic"
   NetCDF3 files, or NetCDF4 which is based on HDF5. Support for 
   either (or both) NetCDF and PDB files can be enabled at compile time.
   This allows BOUT++ to read PDB files and write NetCDF outputs or vice-versa.

Released: August 2009
